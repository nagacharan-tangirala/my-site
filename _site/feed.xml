<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://0.0.0.0:8080/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:8080/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-02-06T15:58:49+00:00</updated><id>http://0.0.0.0:8080/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Vendor lock-in Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-vendor-lockin-antipattern/" rel="alternate" type="text/html" title="Vendor lock-in Antipattern" /><published>2025-02-06T14:25:00+00:00</published><updated>2025-02-06T14:25:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-vendor-lockin-antipattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-vendor-lockin-antipattern/"><![CDATA[<p>It is not uncommon to depend on a single vendor for a major feature.
There are countless LLM-wrapper companies that add their own layer on top of the LLM models.
Often, the changes in the LLM API break the tools built around it.
The design should be isolated from the vendor’s API.
Otherwise, the software development life cycle is dependent on the vendor’s own release cycles.
Further, the tight coupling will also prevent from changing the vendor in future.
This is called vendor lock-in antipattern.</p>

<p>A common solution is to isolate the interactions through a middleware.
This separates the application from the vendor’s code, allowing for independent growth of the tool’s feature set.
A good pattern to address this is the adapter pattern.
Only the adapter talks to the vendor, while the rest of the application is independent of the vendor’s code.
Any change in the vendor’s code should ideally require only changes in the adapter class.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SupportApp</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">apiKey</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="o">...</span>
    <span class="nc">String</span> <span class="nf">promptChatGPT</span><span class="o">(</span><span class="nc">String</span> <span class="n">prompt</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Send the prompt to ChatGPT, get the response, parse it to a String and return it.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">SupportApp</code> is dependent on the <code class="language-plaintext highlighter-rouge">ChatGPT</code> to provide the prompting capabilities.
When a new capable model is released, the <code class="language-plaintext highlighter-rouge">SupportApp</code> needs too much refactoring.
Instead, we can use adapter pattern and decouple the application from LLM.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SupportApp</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="nc">LLMAdapter</span> <span class="n">llmAdapter</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="o">...</span>
    <span class="nc">String</span> <span class="nf">promptLLM</span><span class="o">(</span><span class="nc">String</span> <span class="n">prompt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">llmAdapter</span><span class="o">.</span><span class="na">promptLLM</span><span class="o">(</span><span class="n">prompt</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">LLMAdapter</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">apiKey</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LLMPreferred</span> <span class="n">llmPreferred</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="nc">LLMAdapter</span><span class="o">(</span><span class="nc">LLMPreferred</span> <span class="n">llmChoice</span><span class="o">,</span> <span class="nc">String</span> <span class="n">apiKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">llmPreferred</span> <span class="o">=</span> <span class="n">llmChoice</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="o">...</span>
    <span class="nc">String</span> <span class="nf">promptPreferredLLM</span><span class="o">(</span><span class="nc">String</span> <span class="n">prompt</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Send the prompt to the preferred LLM, get the response, parse it to a String and return it.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The way <code class="language-plaintext highlighter-rouge">LLMAdapter</code> is implemented will allow for plugging in any preferred LLM model.
There is no dependency on a single vendor to provide the necessary service.
When a better model like <code class="language-plaintext highlighter-rouge">DeepSeek</code> comes along, then it is easier to change the code.
Moreover, the <code class="language-plaintext highlighter-rouge">SupportApp</code> is not affected when the vendor is changed.
Only change happens in the <code class="language-plaintext highlighter-rouge">LLMAdapter</code> class.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Vendor lock-in Antipattern]]></summary></entry><entry><title type="html">Cut and Paste Programming Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-cut-and-paste-antipattern/" rel="alternate" type="text/html" title="Cut and Paste Programming Antipattern" /><published>2025-02-06T12:55:00+00:00</published><updated>2025-02-06T12:55:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-cut-and-paste-antipattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-cut-and-paste-antipattern/"><![CDATA[<p>Cut and Paste programming antipattern is the result of relying too much on external sources for coding.
Earlier, it was due to pasting code snippets off of StackOverflow and other code related websites.
With the increasing AI penetration in programming, developers should be more aware of this antipattern.
The code suggestions can be often littered with subtle bugs or non-standard design practices.
As a developer, it is the responsibility to recognize such bugs and only incorporate good code.
Otherwise, the codebase will grow huge with lot of automagically generated code.
The developers will no longer be in control of the codebase and enhancements can be tricky.</p>

<p>Feature development is important, but developing in the future should not be compromised.
While good design practices can sometimes be time consuming, the benefits are always evident.
Cut and Paste programming can lead to exponential growth of number of lines, but with questionable reliability.
It is always recommended to be mindful of letting such code growth.</p>

<p>A common way of solving such antipattern growth is refactoring.
There are three main things that a developer can do:</p>

<ul>
  <li>Common method refactoring: Refactoring out the common methods to a parent class will reduce the surface area for bugs.</li>
  <li>White box reuse: Subtle differences captured in the subclass to mimic the majority of superclass functionality as is and support the new differentiable feature.</li>
  <li>Black box reuse: Combine several fragmented classes doing similar task to one class.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Simulator</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kt">void</span> <span class="nf">moveVehicles</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to move the vehicles.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">moveElectricVehicles</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to move the electric vehicles.</span>
    <span class="o">}</span>
    <span class="o">..</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The logic for moving the normal vehicles is already written in <code class="language-plaintext highlighter-rouge">moveVehicles()</code>.
Hence, a new feature for electric vehicles is cut and pasted from <code class="language-plaintext highlighter-rouge">moveVehicles()</code> and modified to fit electric vehicle behavior.
Adding new vehicles will further blow up this class size.
Further, the functionality is repeated in both the functions.
This will have deviations in the behavior, causing bug fixes from one method not reaching the other function.</p>

<p>This can be addressed by using the proposed methods.
Applying one of the tricks, we can refactor this code.
<code class="language-plaintext highlighter-rouge">Vehicle</code> can be defined as a parent class, with <code class="language-plaintext highlighter-rouge">BenzinVehicle</code> and <code class="language-plaintext highlighter-rouge">ElectricVehicle</code> being the children classes.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Vehicle</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">vehicleId</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="o">...</span>
    <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Common logic to move the vehicles.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">BenzinVehicle</span> <span class="kd">extends</span> <span class="nc">Vehicle</span> <span class="o">{</span>

    <span class="o">...</span>

    <span class="c1">// No need to override move() here because default is sufficient.</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ElectricVehicle</span> <span class="kd">extends</span> <span class="nc">Vehicle</span> <span class="o">{</span>

    <span class="o">...</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to move the electric vehicles because of their different drive train.</span>
    <span class="o">}</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The simulator can only have the logic for moving the vehicles, without being concerned about the type of vehicles.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Simulator</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kt">void</span> <span class="nf">moveVehicles</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Call the respective vehicles` move function.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Although this is obvious in this case, real-world codes are much more complex and can be difficult to spot such antipatterns.
While developing, the developers should be long-sighted and should not trade short-term productivity over long-term maintainability.
This is called tech debt and will be paid by the team in future if not the same developer who introduced it.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Cut and Paste Programming Antipattern]]></summary></entry><entry><title type="html">Spaghetti Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-spaghetti-antipattern/" rel="alternate" type="text/html" title="Spaghetti Antipattern" /><published>2025-02-06T12:25:00+00:00</published><updated>2025-02-06T12:25:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-spaghetti-antipattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-spaghetti-antipattern/"><![CDATA[<p>Spaghetti code is something that represents complex code.
There is no pattern, no architecture, no proper design, and many bad practices.
It is hard to solve this pattern, but should be prevented from the beginning.
Good design practices must be embraced to avoid code turning into a spaghetti.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Spaghetti Antipattern]]></summary></entry><entry><title type="html">Blob Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-blob-antipattern/" rel="alternate" type="text/html" title="Blob Antipattern" /><published>2025-02-06T11:35:00+00:00</published><updated>2025-02-06T11:35:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-blob-antipattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-blob-antipattern/"><![CDATA[<p>A class breaks its single responsibility principle and tends to grow extremely large in size.
Such a class is also called god object because it has most of the components of a system within itself.
Some design patterns also tend to lead towards such blob anti-pattern.
For example, mediator pattern helps two objects with different interfaces communicate.
If the number of interactions are too large or the number of components grow, the mediator object will have references of several services.
This makes the mediator class god object.
Even Facade pattern can lead to becoming a god object.</p>

<p>It is important to recognize such classes and reduce their responsibilities at an earlier stage.
Otherwise, they can become pain to maintain and enhance.
Over the time, developers will be scared to modify for the fear of breaking everything down.
Typical strategy to deal with it is:</p>

<ul>
  <li>Distribute the responsibilities to smaller classes.</li>
  <li>Move functionalities to the respective smaller classes.</li>
  <li>Remove redundant associations and interactions with other classes.</li>
</ul>

<p>A simple example is a chess game code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Chess</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kt">void</span> <span class="nf">capturePlayerMove</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// logic to capture the user interface and carry out the move.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">updateUI</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Updates the UI after the move.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">performComputerMove</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// logic to make the computer move the next piece.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">captureStats</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// logic to capture the statistics.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">trackTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// logic to capture the time remaining for each player.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Clearly, the class is trying to do a lot and is an example for <strong>Blob</strong> pattern.
The functionality can be spread out over different classes.
There can be <code class="language-plaintext highlighter-rouge">Player</code> class responsible for the player action capture.
A UI manager will take care of the game window updates.
AI player will be in its own classes.
The timing module can be in its own class.
This is how the blob is dealt with.</p>

<p>A general exception to such approach when dealing with legacy systems.
Sometimes, it is not possible to modify the legacy code and building a wrapper around it is the only choice.
In such cases, breaking the code responsibilities can be tricky and a blob is unavoidable.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Blob Antipattern]]></summary></entry><entry><title type="html">Code Smells</title><link href="http://0.0.0.0:8080/blog/2025/java-code-smells/" rel="alternate" type="text/html" title="Code Smells" /><published>2025-02-06T11:35:00+00:00</published><updated>2025-02-06T11:35:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-code-smells</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-code-smells/"><![CDATA[]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="code-smell" /><summary type="html"><![CDATA[Common code smells and suggestions to fix]]></summary></entry><entry><title type="html">Lava Flow Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-lava-flow-antipattern/" rel="alternate" type="text/html" title="Lava Flow Antipattern" /><published>2025-02-06T10:35:00+00:00</published><updated>2025-02-06T10:35:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-lava-flow-antipattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-lava-flow-antipattern/"><![CDATA[<p>These are the remnants of the code blocks that are either commented out or disabled by renaming the functions.
There are several reasons for this to happen.
Team members leaving the company, change in project goals, change in requirements, technology rigidness, lack of knowledge to fix broken things etc.
All of this results in weird comments that are left in production code to not touch the code.</p>

<p>It is compared to lava because over the years, lava gets hardened and remains as a solid with its scars visible evidently.
An entire architecture overhaul is required to deal with such remnants of the code.
Most importantly, knowledge of the engineer is essential to identify such parts of the code.</p>

<p>It is difficult to show how to fix it in an example.
All I can do is show some bad comments:
These are imagined but some or the other form of such comments are found in real-world code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">sendData</span><span class="o">()</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="c1">// No idea why we need to send empty string but it will break if we don't.</span>
    <span class="c1">// Don't try to change it, otherwise the rest of the code will not work.</span>
    <span class="c1">// This depends on some library that we don't have code for.</span>
    <span class="nc">Url</span> <span class="n">url</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getUrl</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Implemented by the Lead engineer who left us last year.</span>
<span class="c1">// No one knows what the numbers are for but this function is essential for our workflow.</span>
<span class="c1">// Changing this function will break the production.</span>
<span class="kt">double</span> <span class="nf">getNumber</span><span class="o">(</span><span class="nc">Entity</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>

<span class="c1">// Some logic written to compute numbers.</span>
<span class="c1">// Uses lot of constants that are not defined.</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Lava Flow Antipattern]]></summary></entry><entry><title type="html">Functional Decomposition Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-functional-decomposition/" rel="alternate" type="text/html" title="Functional Decomposition Antipattern" /><published>2025-02-06T09:55:00+00:00</published><updated>2025-02-06T09:55:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-functional-decomposition</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-functional-decomposition/"><![CDATA[<p>The functional approach treats everything as a function instead of the Object-oriented approach.
The problem with this is that the maintenance can be challenging and tracking changes will be difficult.
Rather than introducing as a function within the same class, it makes sense to imagine the functionality as a set of objects.
However, the challenge with object-oriented approach is the level of granularity to choose.
This requires the business case understanding to focus on the aspects that users need.</p>

<p>A simple example is a <em>vehicle simulator</em>.
The granularity level should match the target users.
For instance, if the users only care about how vehicles impact a certain road network, then it makes sense to model the mobility and simplify the vehicle.
Similarly, if the users want to study the electric charging mechanism, then simulating the power train model of vehicle is required.
It does not make sense to simulate power train of thousands of vehicles if the user only cares about the vehicles’ impact on the road.</p>

<p>A simple example is shape manager in any GUI tool:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ShapeManager</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kt">void</span> <span class="nf">drawSquare</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to draw square.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">drawCircle</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to draw circle.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">resizeSquare</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to resize square.</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">resizeCircle</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to resize circle.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Looking at shapes as manager results in the above decomposition.
If a new shape is added, then the class further blows up.
A future requirement to change the shape may also result in additional complexities.
Hence, we decompose this to objects to make it easier to manage.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Shape</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kt">void</span> <span class="nf">draw</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">resize</span><span class="o">();</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Square</span> <span class="kd">implements</span> <span class="nc">Shape</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to draw square.</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">resize</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to resize square.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">implements</span> <span class="nc">Shape</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to draw circle.</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">resize</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Logic to resize circle.</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now the shape manager can just delegate the drawing logic to these sub-classes.
Any modifications to the properties like color or effects can also be further delegated to the respective class implementation.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Functional Decomposition Antipattern with an example in Java]]></summary></entry><entry><title type="html">Golden Hammer Antipattern</title><link href="http://0.0.0.0:8080/blog/2025/java-golden-hammer-antipattern/" rel="alternate" type="text/html" title="Golden Hammer Antipattern" /><published>2025-02-06T09:35:00+00:00</published><updated>2025-02-06T09:35:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-golden-hammer-antipattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-golden-hammer-antipattern/"><![CDATA[<p>Anti-patterns are similar to patterns but result in negative consequences instead of benefits.
Initially, they look tempting and feel like a good choice to apply.
However, they can quickly become the weakness of the system.
Maintenance and expansion gets increasingly challenging.</p>

<p>One such anti-pattern is Golden Hammer.
There is a saying that, when you have just a hammer with you, everything looks like a nail.
If a developer is familiar with some tool/framework/data structure, they are prone to use it in every scenario.
They can have preferences in working with certain tools/patterns.
However, using them everywhere may not be a good choice and can quickly cause problems for the rest of team.</p>

<p>A simple way to demonstrate is the use of <code class="language-plaintext highlighter-rouge">List</code> everywhere, as if it is a golden hammer.
Suppose that the developer who wrote this (not me) fancies <code class="language-plaintext highlighter-rouge">List</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Simulator</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">vehicleIds</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Vehicle</span><span class="o">&gt;</span> <span class="n">vehicles</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">(</span><span class="kt">int</span> <span class="n">vehicleId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Vehicle</span> <span class="n">vehicle</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="nl">vehId:</span> <span class="n">vehicleIds</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">vehicleId</span> <span class="o">==</span> <span class="n">vehId</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">vehicle</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">vehicles</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">vehId</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">double</span> <span class="n">speed</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">vehicle</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">speed</span> <span class="o">=</span> <span class="n">vehicle</span><span class="o">.</span><span class="na">getSpeed</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">speed</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This can be way more simplified if a <code class="language-plaintext highlighter-rouge">Map</code> is used instead.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Simulator</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Vehicle</span><span class="o">&gt;</span> <span class="n">vehicles</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="o">...</span>
    <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">(</span><span class="kt">int</span> <span class="n">vehicleId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">vehicles</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">vehicleId</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">vehicle</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">vehicleId</span><span class="o">).</span><span class="na">getSpeed</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mf">0.0</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This looks simple with this example but imagine if this applies to any specific <strong>Design Pattern</strong> or <strong>Architecture Pattern</strong> then there will be more complexity introduced in the code just to fit in the preferred pattern.
It is recommended to pick the best pattern that fits the problem instead of personal choices.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="anti-patterns" /><summary type="html"><![CDATA[Golden Hammer Antipattern with an example in Java]]></summary></entry><entry><title type="html">Blackboard Architecture Pattern</title><link href="http://0.0.0.0:8080/blog/2025/java-blackboard-pattern/" rel="alternate" type="text/html" title="Blackboard Architecture Pattern" /><published>2025-02-05T12:35:00+00:00</published><updated>2025-02-05T12:35:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-blackboard-pattern</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-blackboard-pattern/"><![CDATA[<p>Blackboard pattern is a very complex architecture pattern.
It is often used when there are no straightforward solutions to a complex problem with dynamic inputs.
This is more of an algorithm to solve some not-so-well defined problems.
The development complexity is too high and might take years to develop a reasonable solution.
Personally speaking, this is not a highly recommended pattern to use.
I have added this for the sake of completion.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="patterns" /><category term="architecture" /><summary type="html"><![CDATA[Blackboard architecture pattern with no example]]></summary></entry><entry><title type="html">Broker Architecture Pattern</title><link href="http://0.0.0.0:8080/blog/2025/java-broker/" rel="alternate" type="text/html" title="Broker Architecture Pattern" /><published>2025-02-05T12:35:00+00:00</published><updated>2025-02-05T12:35:00+00:00</updated><id>http://0.0.0.0:8080/blog/2025/java-broker</id><content type="html" xml:base="http://0.0.0.0:8080/blog/2025/java-broker/"><![CDATA[<p>Client and server talk to each other to carry out transactions.
However, the implementation of the server can be in an entirely different language with an incompatible API.
Broker pattern helps to enable communication between such diverse client and server implementations.
Further, it decouples the client and server, allowing good extensibility even during runtime.</p>

<p>A very dumb broker implementation is demo’d here, the real implementations are typically complex.</p>

<p>Phone is a client that wants to access the weather server to get latest temperature:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Phone</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">temperature</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Location</span> <span class="n">location</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">WeatherService</span> <span class="n">weatherService</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getTemperature</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">temparature</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">weatherService</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>A simple <code class="language-plaintext highlighter-rouge">WeatherService</code> can be:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">WeatherService</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kt">double</span> <span class="nf">getTemperature</span><span class="o">(</span><span class="nc">Location</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Some logic to get the latest temperature data and update it.</span>
        <span class="k">return</span> <span class="n">temperature</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Such an implementation is tightly coupled. 
Broker pattern allows us to decouple this.</p>

<p>A simple broker will contain a list of services and returns the requested service to the client.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Broker</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="nc">WeatherService</span> <span class="n">weatherService</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="o">...</span>
    <span class="kt">double</span> <span class="nf">getTemperature</span><span class="o">(</span><span class="nc">Location</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">weatherService</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">weatherService</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">ServiceNotFoundException</span><span class="o">(</span><span class="s">"Weather service is not available"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Client, instead of directly contacting the <code class="language-plaintext highlighter-rouge">WeatherService</code> directly, will talk to the <code class="language-plaintext highlighter-rouge">Broker</code>.
The modified <code class="language-plaintext highlighter-rouge">Client</code> will now look like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Phone</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">temperature</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Location</span> <span class="n">location</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Broker</span> <span class="n">broker</span><span class="o">;</span>
    <span class="o">...</span>

    <span class="o">...</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getTemperature</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">temparature</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">broker</span><span class="o">.</span><span class="na">getTemperature</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">location</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This is how <code class="language-plaintext highlighter-rouge">Broker</code> pattern sits in between <code class="language-plaintext highlighter-rouge">Client</code> and <code class="language-plaintext highlighter-rouge">Server</code> and helps to decouple them.
Expansion is also easier with this approach.</p>]]></content><author><name></name></author><category term="code" /><category term="java-snippets" /><category term="course" /><category term="patterns" /><category term="architecture" /><summary type="html"><![CDATA[Broker architecture pattern with an example in Java]]></summary></entry></feed>